/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   opencl_init.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fmessina <fmessina@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2017/10/03 22:22:15 by fmessina          #+#    #+#             */
/*   Updated: 2017/10/03 23:26:22 by fmessina         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "rtv1.h"

void			opencl_builderror(t_env *e, int err)
{
	size_t	len;
	char	buffer[50000];

	if (err == 1)
		s_error("Error: Failed to create a device group!");
	else if (err == 2)
		s_error("Error: Failed to create a compute context!");
	else if (err == 3)
		s_error("Error: Failed to create a commands queue!");
	else if (err == 4)
		s_error("Error: Failed to create compute program!");
	else if (err == 5)
	{
		ft_putendl("Error: Failed to build program executable!");
		clGetProgramBuildInfo(e->program, e->device_id, \
				CL_PROGRAM_BUILD_LOG, sizeof(buffer), buffer, &len);
		s_error(buffer);
	}
	else if (err == 6)
		s_error("Error: Failed to create compute kernel!");
	else if (err == 7)
		s_error("Error: Failed to allocate device memory!\n");
	if (err >= 5)
		s_error("Wrong error code");
}

void		opencl_set_args(t_env *e)
{
	int		err;

	err = 0;
	e->gpu = 1;
//	err |= clSetKernelArg(e->kernel, 1, sizeof(int), &e->win_w);
//	err |= clSetKernelArg(e->kernel, 2, sizeof(int), &e->win_h);
//	err |= clSetKernelArg(e->kernel, 3, sizeof(double), &e->dec_x);
//	err |= clSetKernelArg(e->kernel, 4, sizeof(double), &e->dec_y);
		if (err != CL_SUCCESS)
			s_error("Error: Failed to set kernels's arguments");
//	{
//		ft_putstr("Error: Failed to set kernel arguments!");
//		ft_putnbr(err);
//		ft_putchar('\n');
//		exit(1);
//	}
}

void			opencl_build(t_env *e)
{
	int		err;

	if ((err = clBuildProgram(e->program, 0, NULL, NULL, NULL, \
				NULL)) != CL_SUCCESS)
		opencl_builderror(e, 5);
	if (!(e->kernel = clCreateKernel(e->program, "rtv1", &err)) \
				|| err != CL_SUCCESS)
		opencl_builderror(e, 6);
	e->count = e->win_w * e->win_h;
	if (!(e->output = clCreateBuffer(e->context, CL_MEM_WRITE_ONLY, \
				e->count * 4, NULL, NULL)))
		opencl_builderror(e, 7);
}

static	void		load_kernel(t_env *e)
{
	int		fd;
	int		ret;
	char	*line;
	char	*tmp;
	
	if ((fd = open("./src/kernel.cl", O_RDONLY)) == -1)
		s_error("Error opening Kernel file");
	while ((ret = get_next_line(fd, &line)) > 0)
	{
		tmp = e->kernel_src;
		e->kernel_src = ft_strjoin_frs1(e->kernel_src, "\n");
		tmp = e->kernel_src;
		e->kernel_src = ft_strjoin_free(e->kernel_src, line);
	}
	(ret == -1 ? s_error("GNL read error") : 0);
	tmp = e->kernel_src;
	e->kernel_src = ft_strjoin_frs1(e->kernel_src, "\n");
	free(tmp);
	close(fd);
}


int			opencl_init(t_env *e)
{
	int		err;

	load_kernel(e);
	if ((err = clGetDeviceIDs(NULL, e->gpu ? CL_DEVICE_TYPE_GPU : \
				CL_DEVICE_TYPE_CPU, 1, &e->device_id, NULL)) != CL_SUCCESS)
		opencl_builderror(e, 1);
	if (!(e->context = clCreateContext(0, 1, &e->device_id,	NULL, NULL, &err)))
		opencl_builderror(e, 2);
	if (!(e->commands = clCreateCommandQueue(e->context, \
		e->device_id, 0, &err)))
		opencl_builderror(e, 3);
	if (!(e->program = clCreateProgramWithSource(e->context, 1, \
		(const char **)&e->kernel_src, NULL, &err)))
		opencl_builderror(e, 4);
	opencl_build(e);
	opencl_set_args(e);
	return (0);
}
